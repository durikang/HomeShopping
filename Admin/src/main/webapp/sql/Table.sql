-- 테이블 삭제

-- 댓글을 관리하는 테이블 삭제
DROP TABLE REPLY CASCADE CONSTRAINTS;

-- 장바구니 항목을 관리하는 테이블 삭제
DROP TABLE CART_ITEM CASCADE CONSTRAINTS;

-- 사용자 장바구니를 관리하는 테이블 삭제
DROP TABLE CART CASCADE CONSTRAINTS;

-- 상품 이미지를 관리하는 테이블 삭제
DROP TABLE PRODUCT_IMAGE CASCADE CONSTRAINTS;

-- 상품 리뷰를 관리하는 테이블 삭제
DROP TABLE PRODUCT_REVIEW CASCADE CONSTRAINTS;

-- 상품 정보를 관리하는 테이블 삭제
DROP TABLE PRODUCT CASCADE CONSTRAINTS;

-- 상품 카테고리를 관리하는 테이블 삭제
DROP TABLE PRODUCT_CATEGORY CASCADE CONSTRAINTS;

-- 게시판 카테고리를 관리하는 테이블 삭제
DROP TABLE BOARD_CATEGORY CASCADE CONSTRAINTS;

-- 게시판 카테고리 관리 테이블 삭제
DROP TABLE CATEGORY CASCADE CONSTRAINTS;

-- 주문 항목을 관리하는 테이블 삭제
DROP TABLE ORDER_ITEM CASCADE CONSTRAINTS;

-- 주문 정보를 관리하는 테이블 삭제
DROP TABLE ORDERS CASCADE CONSTRAINTS;

-- 결제 정보를 관리하는 테이블 삭제
DROP TABLE PAYMENT CASCADE CONSTRAINTS;

-- 배송 정보를 관리하는 테이블 삭제
DROP TABLE SHIPMENT CASCADE CONSTRAINTS;

-- 관리자 역할을 관리하는 테이블 삭제
DROP TABLE ADMIN_ROLE CASCADE CONSTRAINTS;

-- 관리자 계정을 관리하는 테이블 삭제
DROP TABLE ADMIN CASCADE CONSTRAINTS;

-- 고객 정보를 관리하는 테이블 삭제
DROP TABLE CUSTOMER CASCADE CONSTRAINTS;

-- 이벤트 관련 테이블 삭제
-- 사용자 쿠폰을 관리하는 테이블 삭제
DROP TABLE USER_COUPON CASCADE CONSTRAINTS;

-- 이메일 발송 기록을 관리하는 테이블 삭제
DROP TABLE EMAIL_LOG CASCADE CONSTRAINTS;

-- 쿠폰 정보를 관리하는 테이블 삭제
DROP TABLE COUPON CASCADE CONSTRAINTS;

-- 이벤트 정보를 관리하는 테이블 삭제
DROP TABLE EVENT CASCADE CONSTRAINTS;



CREATE TABLE USER (
    USER_NO NUMBER PRIMARY KEY,  -- 사용자 번호 (Primary Key)
    USER_ID VARCHAR2(50) UNIQUE NOT NULL,  -- 사용자 아이디 (Unique, 필수 입력)
    PASSWORD VARCHAR2(100) NOT NULL,  -- 사용자 비밀번호 (필수 입력)
    NAME VARCHAR2(100) NOT NULL,  -- 사용자 이름 (필수 입력)
    EMAIL VARCHAR2(100),  -- 사용자 이메일 주소
    USER_TYPE VARCHAR2(20) NOT NULL CHECK (USER_TYPE IN ('CUSTOMER', 'ADMIN')),  -- 사용자 유형
    IS_DELETED CHAR(1) DEFAULT 'N' CHECK (IS_DELETED IN ('Y', 'N')),  -- 사용자 삭제 여부 (Default: N)
    CREATED_AT DATE DEFAULT SYSDATE,  -- 사용자 등록일 (기본값: 현재 날짜)
    UPDATED_AT DATE  -- 사용자 정보 수정일
);




-- 회원 정보를 관리하는 테이블
CREATE TABLE CUSTOMER (
    USER_NO NUMBER PRIMARY KEY,  -- 사용자 번호 (Primary Key, USER 테이블 참조)
    AGE NUMBER,  -- 회원 나이
    JOB VARCHAR2(100),  -- 회원 직업
    LOCATION VARCHAR2(100),  -- 회원 사는 곳
    MILEAGE NUMBER DEFAULT 0,  -- 회원 마일리지 (기본값: 0)
    LAST_LOGIN_DATE DATE,  -- 마지막 로그인 날짜
    TOTAL_PURCHASE_AMOUNT NUMBER DEFAULT 0,  -- 총 구매 금액 (기본값: 0)
    FOREIGN KEY (USER_NO) REFERENCES USER(USER_NO)  -- USER 테이블 참조
);


-- 관리자 계정을 관리하는 테이블
CREATE TABLE ADMIN (
    USER_NO NUMBER PRIMARY KEY,  -- 사용자 번호 (Primary Key, USER 테이블 참조)
    ROLE_CODE VARCHAR2(300),  -- 역할 코드 (ADMIN_ROLE 테이블의 ROLE_CODE를 참조)
    FOREIGN KEY (USER_NO) REFERENCES USER(USER_NO),  -- USER 테이블 참조
    FOREIGN KEY (ROLE_CODE) REFERENCES ADMIN_ROLE(ROLE_CODE)  -- 역할 코드 (ADMIN_ROLE 테이블 참조)
);


-- 관리자 역할을 관리하는 테이블
CREATE TABLE ADMIN_ROLE (
    ROLE_CODE VARCHAR2(300) PRIMARY KEY,  -- 역할 코드 (Primary Key)
    ROLE_NAME VARCHAR2(100) NOT NULL  -- 역할 이름 (필수 입력)
);

/*
    아래는 사용자 추가 예제

*/

INSERT INTO USER (USER_NO, USER_ID, PASSWORD, NAME, EMAIL, USER_TYPE, CREATED_AT)
VALUES (1, 'john_doe', 'password123', 'John Doe', 'john@example.com', 'CUSTOMER', SYSDATE);

INSERT INTO CUSTOMER (USER_NO, AGE, JOB, LOCATION, MILEAGE, LAST_LOGIN_DATE, TOTAL_PURCHASE_AMOUNT)
VALUES (1, 30, 'Engineer', 'New York', 1000, SYSDATE, 5000);

-- 관리자는 USER_TYPE을 'ADMIN'으로 설정
INSERT INTO USER (USER_NO, USER_ID, PASSWORD, NAME, EMAIL, USER_TYPE, CREATED_AT)
VALUES (2, 'admin_user', 'admin123', 'Admin User', 'admin@example.com', 'ADMIN', SYSDATE);

INSERT INTO ADMIN (USER_NO, ROLE_CODE)
VALUES (2, 'SUPER_ADMIN');

/* 사용자 조회 예제*/

-- 고객 조회
SELECT * FROM CUSTOMER C
JOIN USER U ON C.USER_NO = U.USER_NO
WHERE U.USER_TYPE = 'CUSTOMER';

-- 관리자 조회
SELECT * FROM ADMIN A
JOIN USER U ON A.USER_NO = U.USER_NO
WHERE U.USER_TYPE = 'ADMIN';

/* 사용자 정보 업데이트 예제 */

-- 고객 정보 업데이트
UPDATE CUSTOMER C
JOIN USER U ON C.USER_NO = U.USER_NO
SET C.JOB = 'Senior Engineer', U.EMAIL = 'new_email@example.com'
WHERE U.USER_ID = 'john_doe';

-- 관리자 정보 업데이트
UPDATE ADMIN A
JOIN USER U ON A.USER_NO = U.USER_NO
SET U.EMAIL = 'new_admin_email@example.com'
WHERE U.USER_ID = 'admin_user';


/* 사용자 삭제 예제*/

-- 고객 삭제
DELETE FROM CUSTOMER WHERE USER_NO = 1;
DELETE FROM USER WHERE USER_NO = 1;

-- 관리자 삭제
DELETE FROM ADMIN WHERE USER_NO = 2;
DELETE FROM USER WHERE USER_NO = 2;




-- 게시판 카테고리를 관리하는 테이블
CREATE TABLE BOARD_CATEGORY (
    CATEGORY_NO VARCHAR2(300) PRIMARY KEY,  -- 카테고리 번호 (Primary Key)
    NAME VARCHAR2(100) NOT NULL,  -- 카테고리 이름 (필수 입력)
    DESCRIPTION VARCHAR2(255)  -- 카테고리 설명
);

/* 게시판 카테고리 CRUD 예제  */




INSERT INTO BOARD_CATEGORY (CATEGORY_NO, NAME, DESCRIPTION)
VALUES ('C001', 'General Discussion', 'General topics and discussions');

-- 페이지네이션을 위한 쿼리
SELECT CATEGORY_NO, NAME, DESCRIPTION
FROM (
    SELECT CATEGORY_NO, NAME, DESCRIPTION,
           ROW_NUMBER() OVER (ORDER BY CATEGORY_NO ASC) AS rnum
    FROM BOARD_CATEGORY
) WHERE rnum BETWEEN :startRow AND :endRow;


SELECT CATEGORY_NO, NAME, DESCRIPTION
FROM BOARD_CATEGORY
WHERE CATEGORY_NO = :categoryNo;



UPDATE BOARD_CATEGORY
SET NAME = 'Updated Discussion', DESCRIPTION = 'Updated description'
WHERE CATEGORY_NO = 'C001';

DELETE FROM BOARD_CATEGORY
WHERE CATEGORY_NO = 'C001';


/* 게시판 카테고리 CRUD 예제 끝  */


-- 게시판 게시글을 관리하는 테이블
CREATE TABLE BOARD (
    BOARD_NO NUMBER PRIMARY KEY,  -- 게시글 번호 (Primary Key)
    USER_NO NUMBER,  -- 게시글 작성자 (USER 테이블 참조)
    CATEGORY_NO VARCHAR2(300),  -- 게시글 카테고리 (BOARD_CATEGORY 테이블 참조)
    TITLE VARCHAR2(200) NOT NULL,  -- 게시글 제목 (필수 입력)
    CONTENT VARCHAR2(4000),  -- 게시글 내용
    CREATED_AT DATE DEFAULT SYSDATE,  -- 게시글 작성일 (기본값: 현재 날짜)
    UPDATED_AT DATE,  -- 게시글 수정일
    IS_DELETED CHAR(1) DEFAULT 'N',  -- 게시글 삭제 여부 (Default: N)
    FOREIGN KEY (USER_NO) REFERENCES USER(USER_NO),  -- 작성자 (USER 테이블 참조)
    FOREIGN KEY (CATEGORY_NO) REFERENCES BOARD_CATEGORY(CATEGORY_NO)  -- 카테고리 (BOARD_CATEGORY 테이블 참조)
);

/* 게시판 CRUD 예제  */

INSERT INTO BOARD (BOARD_NO, USER_NO, CATEGORY_NO, TITLE, CONTENT, CREATED_AT, UPDATED_AT, IS_DELETED)
VALUES (1, 1001, 'C001', 'My First Post', 'This is the content of my first post', SYSDATE, NULL, 'N');

-- 페이지네이션을 위한 쿼리
SELECT BOARD_NO, USER_NO, CATEGORY_NO, TITLE, CONTENT, CREATED_AT, UPDATED_AT, IS_DELETED
FROM (
    SELECT BOARD_NO, USER_NO, CATEGORY_NO, TITLE, CONTENT, CREATED_AT, UPDATED_AT, IS_DELETED,
           ROW_NUMBER() OVER (ORDER BY BOARD_NO ASC) AS rnum
    FROM BOARD
) WHERE rnum BETWEEN :startRow AND :endRow;


--detail
SELECT BOARD_NO, USER_NO, CATEGORY_NO, TITLE, CONTENT, CREATED_AT, UPDATED_AT, IS_DELETED
FROM BOARD
WHERE BOARD_NO = :boardNo;


UPDATE BOARD
SET TITLE = 'Updated Title', CONTENT = 'Updated content', UPDATED_AT = SYSDATE
WHERE BOARD_NO = 1;

DELETE FROM BOARD
WHERE BOARD_NO = 1;

/* 게시판 CRUD 예제 끝  */


-- 게시글의 댓글을 관리하는 테이블
CREATE TABLE REPLY (
    REPLY_NO NUMBER PRIMARY KEY,  -- 댓글 번호 (Primary Key)
    BOARD_NO NUMBER,  -- 댓글이 달린 게시글 (BOARD 테이블 참조)
    USER_NO NUMBER,  -- 댓글 작성자 (USER 테이블 참조)
    CONTENT VARCHAR2(4000),  -- 댓글 내용
    CREATED_AT DATE DEFAULT SYSDATE,  -- 댓글 작성일 (기본값: 현재 날짜)
    UPDATED_AT DATE,  -- 댓글 수정일
    IS_DELETED CHAR(1) DEFAULT 'N' CHECK (IS_DELETED IN ('Y', 'N')),  -- 댓글 삭제 여부 (Default: N)
    FOREIGN KEY (BOARD_NO) REFERENCES BOARD(BOARD_NO),  -- 게시글 (BOARD 테이블 참조)
    FOREIGN KEY (USER_NO) REFERENCES USER(USER_NO)  -- 작성자 (USER 테이블 참조)
);

/* 댓글 (REPLY) 테이블 */

-- 페이징처리한 댓글 LIST
SELECT REPLY_NO, BOARD_NO, USER_NO, CONTENT, CREATED_AT, UPDATED_AT, IS_DELETED
FROM (
    SELECT REPLY_NO, BOARD_NO, USER_NO, CONTENT, CREATED_AT, UPDATED_AT, IS_DELETED,
           ROW_NUMBER() OVER (ORDER BY REPLY_NO ASC) AS rnum
    FROM REPLY
    WHERE BOARD_NO = :boardNo
) WHERE rnum BETWEEN :startRow AND :endRow;





-- 특정 게시글에 대한 댓글 목록을 페이지네이션하여 가져오는 쿼리
SELECT REPLY_NO, BOARD_NO, USER_NO, CONTENT, CREATED_AT, UPDATED_AT, IS_DELETED
FROM (
    SELECT REPLY_NO, BOARD_NO, USER_NO, CONTENT, CREATED_AT, UPDATED_AT, IS_DELETED,
           ROW_NUMBER() OVER (ORDER BY CASE WHEN :sort = 'asc' THEN CREATED_AT END ASC, CASE WHEN :sort = 'desc' THEN CREATED_AT END DESC) AS rnum
    FROM REPLY
    WHERE BOARD_NO = :boardNo
) WHERE rnum BETWEEN :startRow AND :endRow;




-- 상품 카테고리를 관리하는 테이블
CREATE TABLE PRODUCT_CATEGORY (
    CATEGORY_NO VARCHAR2(300) PRIMARY KEY,  -- 상품 카테고리 번호 (Primary Key)
    NAME VARCHAR2(100) NOT NULL,  -- 상품 카테고리 이름 (필수 입력)
    DESCRIPTION VARCHAR2(255)  -- 상품 카테고리 설명
);

/*페이징 처리한 상품 카테고리*/
SELECT CATEGORY_NO, NAME, DESCRIPTION
FROM (
    SELECT CATEGORY_NO, NAME, DESCRIPTION,
           ROW_NUMBER() OVER (ORDER BY CATEGORY_NO ASC) AS rnum
    FROM PRODUCT_CATEGORY
) WHERE rnum BETWEEN :startRow AND :endRow;



-- 상품 정보를 관리하는 테이블
CREATE TABLE PRODUCT (
    PRODUCT_NO NUMBER PRIMARY KEY,  -- 상품 번호 (Primary Key)
    CATEGORY_NO VARCHAR2(300),  -- 상품 카테고리 (PRODUCT_CATEGORY 테이블 참조)
    NAME VARCHAR2(100) NOT NULL,  -- 상품 이름 (필수 입력)
    DESCRIPTION VARCHAR2(4000),  -- 상품 설명
    PRICE NUMBER NOT NULL,  -- 상품 가격 (필수 입력)
    STOCK_QUANTITY NUMBER,  -- 재고 수량
    CREATED_AT DATE DEFAULT SYSDATE,  -- 상품 등록일 (기본값: 현재 날짜)
    UPDATED_AT DATE,  -- 상품 수정일
    IS_DELETED CHAR(1) DEFAULT 'N' CHECK (IS_DELETED IN ('Y', 'N')),  -- 상품 삭제 여부 (Default: N)
    TOTAL_SALES NUMBER DEFAULT 0,  -- 총 판매량 (기본값: 0)
    FOREIGN KEY (CATEGORY_NO) REFERENCES PRODUCT_CATEGORY(CATEGORY_NO)  -- 상품 카테고리 (PRODUCT_CATEGORY 테이블 참조)
);

/* 상품 테이블 LIST*/
SELECT PRODUCT_NO, CATEGORY_NO, NAME, DESCRIPTION, PRICE, STOCK_QUANTITY, CREATED_AT, UPDATED_AT, IS_DELETED, TOTAL_SALES
FROM (
    SELECT PRODUCT_NO, CATEGORY_NO, NAME, DESCRIPTION, PRICE, STOCK_QUANTITY, CREATED_AT, UPDATED_AT, IS_DELETED, TOTAL_SALES,
           ROW_NUMBER() OVER (ORDER BY PRODUCT_NO ASC) AS rnum
    FROM PRODUCT
) WHERE rnum BETWEEN :startRow AND :endRow;




-- 상품 이미지를 관리하는 테이블
CREATE TABLE PRODUCT_IMAGE (
    IMAGE_NO NUMBER PRIMARY KEY,  -- 이미지 번호 (Primary Key)
    PRODUCT_NO NUMBER,  -- 이미지가 연결된 상품 (PRODUCT 테이블 참조)
    IMAGE_URL VARCHAR2(255) NOT NULL,  -- 이미지 URL (필수 입력)
    DESCRIPTION VARCHAR2(255),  -- 이미지 설명
    FOREIGN KEY (PRODUCT_NO) REFERENCES PRODUCT(PRODUCT_NO)  -- 상품 (PRODUCT 테이블 참조)
);


-- 상품 리뷰를 관리하는 테이블
CREATE TABLE PRODUCT_REVIEW (
    REVIEW_NO NUMBER PRIMARY KEY,  -- 리뷰 번호 (Primary Key)
    PRODUCT_NO NUMBER,  -- 리뷰 대상 상품 (PRODUCT 테이블 참조)
    USER_NO NUMBER,  -- 리뷰 작성자 (USER 테이블 참조)
    RATING NUMBER CHECK (RATING BETWEEN 1 AND 5),  -- 리뷰 평점 (1~5)
    COMM VARCHAR2(4000),  -- 리뷰 내용
    CREATED_AT DATE DEFAULT SYSDATE,  -- 리뷰 작성일 (기본값: 현재 날짜)
    UPDATED_AT DATE,  -- 리뷰 수정일
    IS_DELETED CHAR(1) DEFAULT 'N' CHECK (IS_DELETED IN ('Y', 'N')),  -- 리뷰 삭제 여부 (Default: N)
    FOREIGN KEY (PRODUCT_NO) REFERENCES PRODUCT(PRODUCT_NO),  -- 상품 (PRODUCT 테이블 참조)
    FOREIGN KEY (USER_NO) REFERENCES USER(USER_NO)  -- 작성자 (USER 테이블 참조)
);


-- 사용자 장바구니를 관리하는 테이블
CREATE TABLE CART (
    CART_NO NUMBER PRIMARY KEY,  -- 장바구니 번호 (Primary Key)
    USER_NO NUMBER,  -- 장바구니 소유자 (USER 테이블 참조)
    CREATED_AT DATE DEFAULT SYSDATE,  -- 장바구니 생성일 (기본값: 현재 날짜)
    FOREIGN KEY (USER_NO) REFERENCES USER(USER_NO)  -- 소유자 (USER 테이블 참조)
);

-- 장바구니에 담긴 상품 항목을 관리하는 테이블
CREATE TABLE CART_ITEM (
    CART_ITEM_NO NUMBER PRIMARY KEY,  -- 장바구니 항목 번호 (Primary Key)
    CART_NO NUMBER,  -- 장바구니 (CART 테이블 참조)
    PRODUCT_NO NUMBER,  -- 장바구니에 담긴 상품 (PRODUCT 테이블 참조)
    QUANTITY NUMBER NOT NULL,  -- 수량 (필수 입력)
    ADDED_AT DATE DEFAULT SYSDATE,  -- 항목 추가일 (기본값: 현재 날짜)
    UPDATED_AT DATE,  -- 항목 수정일
    FOREIGN KEY (CART_NO) REFERENCES CART(CART_NO),  -- 장바구니 (CART 테이블 참조)
    FOREIGN KEY (PRODUCT_NO) REFERENCES PRODUCT(PRODUCT_NO)  -- 상품 (PRODUCT 테이블 참조)
);

-- 주문 정보를 관리하는 테이블
CREATE TABLE ORDERS (
    ORDER_NO NUMBER PRIMARY KEY,  -- 주문 번호 (Primary Key)
    USER_NO NUMBER,  -- 주문한 고객 (USER 테이블 참조)
    ORDER_DATE DATE DEFAULT SYSDATE,  -- 주문 일자 (기본값: 현재 날짜)
    STATUS VARCHAR2(50) DEFAULT 'PENDING' CHECK (STATUS IN ('PENDING', 'SHIPPED', 'DELIVERED', 'CANCELLED')),  -- 주문 상태
    TOTAL_AMOUNT NUMBER NOT NULL,  -- 총 주문 금액 (필수 입력)
    FOREIGN KEY (USER_NO) REFERENCES USER(USER_NO)  -- 고객 (USER 테이블 참조)
);

-- 주문 항목을 관리하는 테이블
CREATE TABLE ORDER_ITEM (
    ORDER_ITEM_NO NUMBER PRIMARY KEY,  -- 주문 항목 번호 (Primary Key)
    ORDER_NO NUMBER,  -- 주문 (ORDERS 테이블 참조)
    PRODUCT_NO NUMBER,  -- 주문한 상품 (PRODUCT 테이블 참조)
    QUANTITY NUMBER NOT NULL,  -- 수량 (필수 입력)
    PRICE NUMBER NOT NULL,  -- 가격 (필수 입력)
    FOREIGN KEY (ORDER_NO) REFERENCES ORDERS(ORDER_NO),  -- 주문 (ORDERS 테이블 참조)
    FOREIGN KEY (PRODUCT_NO) REFERENCES PRODUCT(PRODUCT_NO)  -- 상품 (PRODUCT 테이블 참조)
);

-- 주문 배송 정보를 관리하는 테이블
CREATE TABLE DELIVERY (
    DELIVERY_NO NUMBER PRIMARY KEY,  -- 배송 번호 (Primary Key)
    ORDER_NO NUMBER,  -- 주문 (ORDERS 테이블 참조)
    DELIVERY_DATE DATE,  -- 배송일
    DELIVERY_STATUS VARCHAR2(50) DEFAULT 'PENDING' CHECK (DELIVERY_STATUS IN ('PENDING', 'SHIPPED', 'DELIVERED', 'CANCELLED')),  -- 배송 상태
    FOREIGN KEY (ORDER_NO) REFERENCES ORDERS(ORDER_NO)  -- 주문 (ORDERS 테이블 참조)
);

CREATE TABLE EVENT (
    EVENT_ID NUMBER PRIMARY KEY, -- 이벤트 ID (Primary Key)
    NAME VARCHAR2(255) NOT NULL, -- 이벤트 이름
    DESCRIPTION VARCHAR2(1000), -- 이벤트 설명
    START_DATE DATE, -- 이벤트 시작일
    END_DATE DATE, -- 이벤트 종료일
    CREATED_AT DATE DEFAULT SYSDATE, -- 이벤트 생성일
    UPDATED_AT DATE -- 이벤트 수정일
);
CREATE TABLE COUPON (
    COUPON_ID NUMBER PRIMARY KEY, -- 쿠폰 ID (Primary Key)
    CODE VARCHAR2(50) UNIQUE NOT NULL, -- 쿠폰 코드 (Unique)
    DISCOUNT_AMOUNT NUMBER, -- 할인 금액
    DISCOUNT_PERCENT NUMBER, -- 할인율 (선택적)
    EXPIRY_DATE DATE, -- 만료일
    IS_USED CHAR(1) DEFAULT 'N' CHECK (IS_USED IN ('Y', 'N')), -- 사용 여부
    EVENT_ID NUMBER, -- 이벤트 ID (EVENT 테이블 참조)
    CREATED_AT DATE DEFAULT SYSDATE, -- 쿠폰 생성일
    UPDATED_AT DATE, -- 쿠폰 수정일
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID) -- EVENT 테이블 참조
);
CREATE TABLE EMAIL_LOG (
    EMAIL_LOG_ID NUMBER PRIMARY KEY, -- 이메일 로그 ID (Primary Key)
    EMAIL_ADDRESS VARCHAR2(255) NOT NULL, -- 이메일 주소
    COUPON_ID NUMBER, -- 쿠폰 ID (COUPON 테이블 참조)
    SENT_AT DATE DEFAULT SYSDATE, -- 이메일 발송일
    STATUS VARCHAR2(50) DEFAULT 'SENT' CHECK (STATUS IN ('SENT', 'FAILED')), -- 발송 상태
    ERROR_MESSAGE VARCHAR2(1000), -- 발송 실패 시 에러 메시지
    FOREIGN KEY (COUPON_ID) REFERENCES COUPON(COUPON_ID) -- COUPON 테이블 참조
);
CREATE TABLE USER_COUPON (
    USER_COUPON_ID NUMBER PRIMARY KEY, -- 사용자 쿠폰 ID (Primary Key)
    USER_NO NUMBER, -- 사용자 ID (USER 테이블 참조)
    COUPON_ID NUMBER, -- 쿠폰 ID (COUPON 테이블 참조)
    RECEIVED_AT DATE DEFAULT SYSDATE, -- 쿠폰 수신일
    IS_REDEEMED CHAR(1) DEFAULT 'N' CHECK (IS_REDEEMED IN ('Y', 'N')), -- 사용 여부
    REDEEMED_AT DATE, -- 쿠폰 사용일
    FOREIGN KEY (USER_NO) REFERENCES USER(USER_NO), -- USER 테이블 참조
    FOREIGN KEY (COUPON_ID) REFERENCES COUPON(COUPON_ID) -- COUPON 테이블 참조
);
